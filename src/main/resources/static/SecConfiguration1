package com.example.MicroServiceFormation.JWT;

import com.example.MicroServiceFormation.Dao.UserDao;
import com.example.MicroServiceFormation.Model.AppUsers;
import com.example.MicroServiceFormation.Service.UsersService;
import java.util.ArrayList;
import java.util.Collection;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
//import org.springframework.security.authentication.AuthenticationManager;
//import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
//import org.springframework.security.config.annotation.web.builders.HttpSecurity;
//import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
//import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
//import org.springframework.security.config.http.SessionCreationPolicy;
//import org.springframework.security.core.GrantedAuthority;
//import org.springframework.security.core.authority.SimpleGrantedAuthority;
//import org.springframework.security.core.userdetails.User;
//import org.springframework.security.core.userdetails.UserDetails;
//import org.springframework.security.core.userdetails.UserDetailsService;
//import org.springframework.security.core.userdetails.UsernameNotFoundException;
//import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
/*
@Configuration
@EnableWebSecurity*/
public class SecurityConfig /*extends WebSecurityConfigurerAdapter */{
//
//    @Autowired UserDao usersDao;
//    
//    @Override
//    protected void configure(HttpSecurity http) throws Exception {
//         http.csrf().disable();
//         http.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
//        http.headers().frameOptions().disable();
//        http.authorizeRequests().antMatchers("/login/**","/Utilisateur/addNewUser/**","/Utilisateur/refreshToken/**").permitAll();// les access libres
//        http.authorizeRequests().anyRequest().authenticated();
//        http.addFilter( new JwtAuthenticationFilter(authenticationManagerBean()));
//        http.addFilterBefore(new JwtAutorizationFilter(), UsernamePasswordAuthenticationFilter.class);
//    }
//
//    @Bean
//    @Override
//    public AuthenticationManager authenticationManagerBean() throws Exception {
//        return super.authenticationManagerBean(); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody
//    }
//    
//    
//
//    @Override
//    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
//        auth.userDetailsService( 
//                new UserDetailsService(){
//           
//                    @Override
//                    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
//                        AppUsers user = usersDao.findByUsername(username);
//                        Collection<GrantedAuthority> authorities = new ArrayList<>();
//                        user.getAppRoles().forEach(r->{
//                            authorities.add(new SimpleGrantedAuthority(r.getRoleName()));
//                        });
//                        return new User(user.getUsername(),user.getPassword(),authorities);
//                    }
//                    
//                });
//    }
//    
}

